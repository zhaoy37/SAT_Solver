Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> formula
Rule 1     formula -> LITERAL
Rule 2     formula -> formula AND formula
Rule 3     formula -> formula OR formula
Rule 4     formula -> NOT formula
Rule 5     formula -> LPAREN formula RPAREN
Rule 6     formula -> TRUE
Rule 7     formula -> FALSE

Terminals, with rules where they appear

AND                  : 2
FALSE                : 7
LITERAL              : 1
LPAREN               : 5
NOT                  : 4
OR                   : 3
RPAREN               : 5
TRUE                 : 6
error                : 

Nonterminals, with rules where they appear

formula              : 2 2 3 3 4 5 0

Parsing method: LALR

state 0

    (0) S' -> . formula
    (1) formula -> . LITERAL
    (2) formula -> . formula AND formula
    (3) formula -> . formula OR formula
    (4) formula -> . NOT formula
    (5) formula -> . LPAREN formula RPAREN
    (6) formula -> . TRUE
    (7) formula -> . FALSE

    LITERAL         shift and go to state 2
    NOT             shift and go to state 3
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    formula                        shift and go to state 1

state 1

    (0) S' -> formula .
    (2) formula -> formula . AND formula
    (3) formula -> formula . OR formula

    AND             shift and go to state 7
    OR              shift and go to state 8


state 2

    (1) formula -> LITERAL .

    AND             reduce using rule 1 (formula -> LITERAL .)
    OR              reduce using rule 1 (formula -> LITERAL .)
    $end            reduce using rule 1 (formula -> LITERAL .)
    RPAREN          reduce using rule 1 (formula -> LITERAL .)


state 3

    (4) formula -> NOT . formula
    (1) formula -> . LITERAL
    (2) formula -> . formula AND formula
    (3) formula -> . formula OR formula
    (4) formula -> . NOT formula
    (5) formula -> . LPAREN formula RPAREN
    (6) formula -> . TRUE
    (7) formula -> . FALSE

    LITERAL         shift and go to state 2
    NOT             shift and go to state 3
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    formula                        shift and go to state 9

state 4

    (5) formula -> LPAREN . formula RPAREN
    (1) formula -> . LITERAL
    (2) formula -> . formula AND formula
    (3) formula -> . formula OR formula
    (4) formula -> . NOT formula
    (5) formula -> . LPAREN formula RPAREN
    (6) formula -> . TRUE
    (7) formula -> . FALSE

    LITERAL         shift and go to state 2
    NOT             shift and go to state 3
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    formula                        shift and go to state 10

state 5

    (6) formula -> TRUE .

    AND             reduce using rule 6 (formula -> TRUE .)
    OR              reduce using rule 6 (formula -> TRUE .)
    $end            reduce using rule 6 (formula -> TRUE .)
    RPAREN          reduce using rule 6 (formula -> TRUE .)


state 6

    (7) formula -> FALSE .

    AND             reduce using rule 7 (formula -> FALSE .)
    OR              reduce using rule 7 (formula -> FALSE .)
    $end            reduce using rule 7 (formula -> FALSE .)
    RPAREN          reduce using rule 7 (formula -> FALSE .)


state 7

    (2) formula -> formula AND . formula
    (1) formula -> . LITERAL
    (2) formula -> . formula AND formula
    (3) formula -> . formula OR formula
    (4) formula -> . NOT formula
    (5) formula -> . LPAREN formula RPAREN
    (6) formula -> . TRUE
    (7) formula -> . FALSE

    LITERAL         shift and go to state 2
    NOT             shift and go to state 3
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    formula                        shift and go to state 11

state 8

    (3) formula -> formula OR . formula
    (1) formula -> . LITERAL
    (2) formula -> . formula AND formula
    (3) formula -> . formula OR formula
    (4) formula -> . NOT formula
    (5) formula -> . LPAREN formula RPAREN
    (6) formula -> . TRUE
    (7) formula -> . FALSE

    LITERAL         shift and go to state 2
    NOT             shift and go to state 3
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    formula                        shift and go to state 12

state 9

    (4) formula -> NOT formula .
    (2) formula -> formula . AND formula
    (3) formula -> formula . OR formula

    AND             reduce using rule 4 (formula -> NOT formula .)
    OR              reduce using rule 4 (formula -> NOT formula .)
    $end            reduce using rule 4 (formula -> NOT formula .)
    RPAREN          reduce using rule 4 (formula -> NOT formula .)

  ! AND             [ shift and go to state 7 ]
  ! OR              [ shift and go to state 8 ]


state 10

    (5) formula -> LPAREN formula . RPAREN
    (2) formula -> formula . AND formula
    (3) formula -> formula . OR formula

    RPAREN          shift and go to state 13
    AND             shift and go to state 7
    OR              shift and go to state 8


state 11

    (2) formula -> formula AND formula .
    (2) formula -> formula . AND formula
    (3) formula -> formula . OR formula

    AND             reduce using rule 2 (formula -> formula AND formula .)
    OR              reduce using rule 2 (formula -> formula AND formula .)
    $end            reduce using rule 2 (formula -> formula AND formula .)
    RPAREN          reduce using rule 2 (formula -> formula AND formula .)

  ! AND             [ shift and go to state 7 ]
  ! OR              [ shift and go to state 8 ]


state 12

    (3) formula -> formula OR formula .
    (2) formula -> formula . AND formula
    (3) formula -> formula . OR formula

    OR              reduce using rule 3 (formula -> formula OR formula .)
    $end            reduce using rule 3 (formula -> formula OR formula .)
    RPAREN          reduce using rule 3 (formula -> formula OR formula .)
    AND             shift and go to state 7

  ! AND             [ reduce using rule 3 (formula -> formula OR formula .) ]
  ! OR              [ shift and go to state 8 ]


state 13

    (5) formula -> LPAREN formula RPAREN .

    AND             reduce using rule 5 (formula -> LPAREN formula RPAREN .)
    OR              reduce using rule 5 (formula -> LPAREN formula RPAREN .)
    $end            reduce using rule 5 (formula -> LPAREN formula RPAREN .)
    RPAREN          reduce using rule 5 (formula -> LPAREN formula RPAREN .)

